#!/bin/bash
set -e

# Imports
. ./lib/usage --source-only
. ./lib/colors --source-only
. ./lib/checkers --source-only
. ./lib/setters --source-only
. ./lib/vm_helpers --source-only

# Set program name variable - basename without subshell
prog=${0##*/}

pushd() { command pushd "$@" >/dev/null ; }
popd() { command popd "$@" >/dev/null ; }

function create ()
{
    # Parse command line arguments
    while getopts ":a:b:c:d:D:f:g:i:k:l:m:M:p:s:t:T:u:hv" opt
    do
        case "$opt" in
            a ) AUTOSTART=true ;;
            b ) BRIDGE="${OPTARG}" ;;
            c ) CPUS="${OPTARG}" ;;
            d ) DISK_SIZE="${OPTARG}" ;;
            D ) DNSDOMAIN="${OPTARG}" ;;
            f ) FEATURE="${OPTARG}" ;;
            g ) GRAPHICS="${OPTARG}" ;;
            i ) IMAGE="${OPTARG}" ;;
            k ) PUBKEY="${OPTARG}" ;;
            l ) IMAGEDIR="${OPTARG}" ;;
            m ) MEMORY="${OPTARG}" ;;
            M ) MACADDRESS="${OPTARG}" ;;
            p ) PORT="${OPTARG}" ;;
            s ) SCRIPTNAME="${OPTARG}" ;;
            t ) DISTRO="${OPTARG}" ;;
            T ) TIMEZONE="${OPTARG}" ;;
            u ) ADDITIONAL_USER="${OPTARG}" ;;
            v ) VERBOSE=1 ;;
            h ) usage ;;
            * ) die "Unsupported option. Run 'kvm-install-vm help create'." ;;
        esac
    done

    shift $((OPTIND - 1))

    # Resize disk if you specify a disk size either via cmdline option or .kivrc
    if [ -n "${DISK_SIZE}" ]
    then
        RESIZE_DISK=true
        DISK_SIZE="${DISK_SIZE}G"   # Append 'G' for Gigabyte
    fi

    # After all options are processed, make sure only one variable is left (vmname)
    if [ "$#" != 1 ]
    then
        printf "Please specify a single host to create.\n"
        printf "Run 'kvm-install-vm help create' for usage.\n"
        exit 1
    else
        export VMNAME=$1
    fi

    # Set cloud-init variables after VMNAME is assigned
    CLOUD_INIT_CFG=${HOME}/cloud.cfg
    USER_DATA=user-data
    META_DATA=meta-data
    CI_ISO=${VMNAME}-cidata.iso

    # Check for ssh key
    check_ssh_key

    if [ ! -z "${IMAGE+x}" ]
    then
        output "Using custom QCOW2 image: ${IMAGE}."
        OS_VARIANT="auto"
        LOGIN_USER="<use the default account in your custom image>"
    else
        fetch_images
    fi

    # Check if domain already exists
    check_domain_exists "${VMNAME}"

    if [ "${DOMAIN_EXISTS}" -eq 1 ]; then
        echo -n "[WARNING] ${VMNAME} already exists.  "
        read -p "Do you want to overwrite ${VMNAME} [y/N]? " -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            remove ${VMNAME}
        else
            echo -e "\nNot overwriting ${VMNAME}. Exiting..."
            exit 1
        fi
    fi

    # Set network restart command
    set_network_restart_cmd

    # Set cloud init remove command
    set_cloud_init_remove

    # Set package manager
    set_sudo_group

    # Finally, create requested VM
    create_vm
}

#--------------------------------------------------
# Main
#--------------------------------------------------

subcommand="${1:-none}"
[[ "${subcommand}" != "none" ]] && shift

case "${subcommand}" in
    none)
        usage
        ;;
    help)
        if [[ "${1:-none}" == "none" ]]; then
            usage
        elif [[ "$1" =~ ^create$|^remove$|^list$|^attach-disk$ ]]; then
            usage_subcommand "$1"
        else
            printf "'$1' is not a valid subcommand.\n\n"
            usage
        fi
        ;;
    list)
        virsh list --all
        exit 0
        ;;
    create|remove|attach-disk|remove-disk)
        if [[ "${1:-none}" == "none" ]]; then
            usage_subcommand "${subcommand}"
        elif [[ "$1" =~ ^help$ ]]; then
            usage_subcommand "${subcommand}"
        else
            set_defaults
            set_custom_defaults
            "${subcommand}" "$@"
            exit $?
        fi
        ;;
    *)
        die "'${subcommand}' is not a valid subcommand.  See 'kvm-install-vm help' for a list of subcommands."
        ;;
esac
