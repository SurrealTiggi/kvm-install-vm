#!/bin/sh

function create ()
{
    # Parse command line arguments
    while getopts ":a:b:c:d:D:f:g:i:k:l:m:M:p:s:t:T:u:hv" opt
    do
        case "$opt" in
            a ) AUTOSTART=true ;;
            b ) BRIDGE="${OPTARG}" ;;
            c ) CPUS="${OPTARG}" ;;
            d ) DISK_SIZE="${OPTARG}" ;;
            D ) DNSDOMAIN="${OPTARG}" ;;
            f ) FEATURE="${OPTARG}" ;;
            g ) GRAPHICS="${OPTARG}" ;;
            i ) IMAGE="${OPTARG}" ;;
            k ) PUBKEY="${OPTARG}" ;;
            l ) IMAGEDIR="${OPTARG}" ;;
            m ) MEMORY="${OPTARG}" ;;
            M ) MACADDRESS="${OPTARG}" ;;
            p ) PORT="${OPTARG}" ;;
            s ) SCRIPTNAME="${OPTARG}" ;;
            t ) DISTRO="${OPTARG}" ;;
            T ) TIMEZONE="${OPTARG}" ;;
            u ) ADDITIONAL_USER="${OPTARG}" ;;
            v ) VERBOSE=1 ;;
            h ) usage ;;
            * ) die "Unsupported option. Run 'kvm-install-vm help create'." ;;
        esac
    done

    shift $((OPTIND - 1))

    # Resize disk if you specify a disk size either via cmdline option or .kivrc
    if [ -n "${DISK_SIZE}" ]
    then
        RESIZE_DISK=true
        DISK_SIZE="${DISK_SIZE}G"   # Append 'G' for Gigabyte
    fi

    # After all options are processed, make sure only one variable is left (vmname)
    if [ "$#" != 1 ]
    then
        printf "Please specify a single host to create.\n"
        printf "Run 'kvm-install-vm help create' for usage.\n"
        exit 1
    else
        export VMNAME=$1
    fi

    # Set cloud-init variables after VMNAME is assigned
    CLOUD_INIT_CFG=${HOME}/cloud.cfg
    USER_DATA=user-data
    META_DATA=meta-data
    CI_ISO=${VMNAME}-cidata.iso

    # Check for ssh key
    check_ssh_key

    if [ ! -z "${IMAGE+x}" ]
    then
        output "Using custom QCOW2 image: ${IMAGE}."
        OS_VARIANT="auto"
        LOGIN_USER="<use the default account in your custom image>"
    else
        fetch_images
    fi

    # Check if domain already exists
    check_domain_exists "${VMNAME}"

    if [ "${DOMAIN_EXISTS}" -eq 1 ]; then
        echo -n "[WARNING] ${VMNAME} already exists.  "
        read -p "Do you want to overwrite ${VMNAME} [y/N]? " -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            remove ${VMNAME}
        else
            echo -e "\nNot overwriting ${VMNAME}. Exiting..."
            exit 1
        fi
    fi

    # Set network restart command
    set_network_restart_cmd

    # Set cloud init remove command
    set_cloud_init_remove

    # Set package manager
    set_sudo_group

    # Finally, create requested VM
    create_vm
}

function cloudinit ()
{
    # cloud-init initial config
    if [ ! -f "${CLOUD_INIT_CFG}" ]
    then
        # Check for existence of a pubkey, or else exit with message
        die "No cloud.cfg found!"
    fi

    cat $CLOUD_INIT_CFG | envsubst > $USER_DATA

    if [ ! -z "${SCRIPTNAME+x}" ]
    then
        SCRIPT=$(< $SCRIPTNAME)
        cat >> $USER_DATA << _EOF_

--==BOUNDARY==
Content-Type: text/x-shellscript; charset="us-ascii"
${SCRIPT}

--==BOUNDARY==--
_EOF_
    else
       cat >> $USER_DATA << _EOF_

--==BOUNDARY==--
_EOF_
    fi

    { echo "instance-id: ${VMNAME}"; echo "local-hostname: ${VMNAME}"; } > $META_DATA

    outputn "Copying cloud image ($(basename ${IMAGE}))"
    DISK=${VMNAME}.qcow2
    cp $IMAGE $DISK && ok
    if $RESIZE_DISK
    then
        outputn "Resizing the disk to $DISK_SIZE"
        qemu-img create -f qcow2 \
            -o preallocation=metadata $DISK.new $DISK_SIZE &>> ${VMNAME}.log \
            && virt-resize --quiet --expand /dev/sda1 $DISK $DISK.new &>> ${VMNAME}.log \
            && (mv $DISK.new $DISK && ok) \
            || die "Could not resize disk."
    fi

    # Create CD-ROM ISO with cloud-init config
    outputn "Generating ISO for cloud-init"
    if [ `which genisoimage &>/dev/null` ]
    then
        genisoimage -output $CI_ISO \
            -volid cidata \
            -joliet -r $USER_DATA $META_DATA &>> ${VMNAME}.log \
            && ok \
            || die "Could not generate ISO."
    else
        mkisofs -o $CI_ISO -V cidata -J -r $USER_DATA $META_DATA &>> ${VMNAME}.log \
            && ok \
            || die "Could not generate ISO."
    fi
}

function create_vm ()
{
    check_vmname_set

    # Start clean
    [ -d "${IMAGEDIR}/${VMNAME}" ] && rm -rf ${IMAGEDIR}/${VMNAME}
    mkdir -p ${IMAGEDIR}/${VMNAME}

    pushd ${IMAGEDIR}/${VMNAME}

    # Create log file
    touch ${VMNAME}.log

    cloudinit

    if [ "${VERBOSE}" -eq 1 ]
    then
        output "Creating storage pool with the following command"
        printf "    virsh pool-create-as \\ \n"
        printf "      --name ${VMNAME} \\ \n"
        printf "      --type dir \\ \n"
        printf "      --target ${IMAGEDIR}/${VMNAME} \n"
    else
        outputn "Creating storage pool"
    fi

    # Create new storage pool for new VM
    (virsh pool-create-as \
        --name ${VMNAME} \
        --type dir \
        --target ${IMAGEDIR}/${VMNAME} &>> ${VMNAME}.log && ok) \
        || die "Could not create storage pool."

    # Add custom MAC Address if specified
    if [ -z "${MACADDRESS}" ]
    then
        NETWORK_PARAMS="bridge=${BRIDGE},model=virtio"
    else
        NETWORK_PARAMS="bridge=${BRIDGE},model=virtio,mac=${MACADDRESS}"
    fi

    if [ "${VERBOSE}" -eq 1 ]
    then
        output "Installing the domain with the following command"
        printf "    virt-install \\ \n"
        printf "      --import \\ \n"
        printf "      --name ${VMNAME} \\ \n"
        printf "      --memory ${MEMORY} \\ \n"
        printf "      --vcpus ${CPUS} \\ \n"
        printf "      --cpu ${FEATURE} \\ \n"
        printf "      --disk ${DISK},format=qcow2,bus=virtio \\ \n"
        printf "      --disk ${CI_ISO},device=cdrom \\ \n"
        printf "      --network ${NETWORK_PARAMS} \\ \n"
        printf "      --os-type=linux \\ \n"
        printf "      --os-variant=${OS_VARIANT} \\ \n"
        printf "      --graphics ${GRAPHICS},port=${PORT},listen=localhost \\ \n"
        printf "      --noautoconsole  \n"
    else
        outputn "Installing the domain"
    fi

    # Call virt-install to import the cloud image and create a new VM
    (virt-install --import \
        --name ${VMNAME} \
        --memory ${MEMORY} \
        --vcpus ${CPUS} \
        --cpu ${FEATURE} \
        --disk ${DISK},format=qcow2,bus=virtio \
        --disk ${CI_ISO},device=cdrom \
        --network ${NETWORK_PARAMS} \
        --os-type=linux \
        --os-variant=${OS_VARIANT} \
        --graphics ${GRAPHICS},port=${PORT},listen=localhost \
        --noautoconsole &>> ${VMNAME}.log && ok ) \
        || die "Could not create domain with virt-install."

    virsh dominfo ${VMNAME} &>> ${VMNAME}.log

    # Enable autostart if true
    if $AUTOSTART
    then
        outputn "Enabling autostart"
        virsh autostart \
            --domain ${VMNAME} > /dev/null 2>&1 \
            && ok \
            || die "Could not enable autostart."
    fi

    # Eject cdrom
    virsh change-media ${VMNAME} hda --eject --config &>> ${VMNAME}.log

    # Remove the unnecessary cloud init files
    outputn "Cleaning up cloud-init files"
    rm $USER_DATA $META_DATA $CI_ISO && ok

    if [ -f "/var/lib/libvirt/dnsmasq/${BRIDGE}.status" ]
    then
        outputn "Waiting for domain to get an IP address"
        MAC=$(virsh dumpxml ${VMNAME} | awk -F\' '/mac address/ {print $2}')
        while true
        do
            IP=$(grep -B1 $MAC /var/lib/libvirt/dnsmasq/$BRIDGE.status | head \
                 -n 1 | awk '{print $2}' | sed -e s/\"//g -e s/,//)
            if [ "$IP" = "" ]
            then
                sleep 1
            else
                ok
                break
            fi
        done
        printf "\n"
        check_delete_known_host
    else
        outputn "Bridge looks like a layer 2 bridge, get the domain's IP address from your DHCP server"
        IP="<IP address>"
    fi

    printf "\n"
    output "SSH to ${VMNAME}: 'ssh ${LOGIN_USER}@${IP}' or 'ssh ${LOGIN_USER}@${VMNAME}'"
    CONSOLE=$(virsh domdisplay ${VMNAME})
    # Workaround because VNC port number shown by virsh domdisplay is offset from 5900
    if [ "${GRAPHICS}" = 'vnc' ]
    then
        CONSOLE_NO_PORT=$(echo $CONSOLE | cut -d ':' -f 1,2 -)
        CONSOLE_PORT=$(expr 5900 + $(echo $CONSOLE | cut -d ':' -f 3 -))
        output "Console at ${CONSOLE_NO_PORT}:${CONSOLE_PORT}"
    else
        output "Console at ${CONSOLE}"
    fi
    output "DONE"

    popd
}

function delete_vm ()
{
    check_vmname_set

    if [ "${DOMAIN_EXISTS}" -eq 1 ]
    then
        outputn "Destroying ${VMNAME} domain"
        virsh destroy --graceful ${VMNAME} > /dev/null 2>&1 \
            && ok \
            || yellow "(Domain is not running.)"

        outputn "Undefining ${VMNAME} domain"
        virsh undefine --managed-save ${VMNAME} > /dev/null 2>&1 \
            && ok \
            || die "Could not undefine domain."
    else
        output "Domain ${VMNAME} does not exist"
    fi

    [ -d "${IMAGEDIR}/${VMNAME}" ] \
        && outputn "Deleting ${VMNAME} files" \
        && rm -rf ${IMAGEDIR}/${VMNAME} \
        && ok

    if [ "${STORPOOL_EXISTS}" -eq 1 ]
    then
        outputn "Destroying ${VMNAME} storage pool"
        virsh pool-destroy ${VMNAME} > /dev/null 2>&1 && ok
    else
        output "Storage pool ${VMNAME} does not exist"
    fi
}

function remove ()
{
    # Parse command line arguments
    while getopts ":hv" opt
    do
        case "$opt" in
            v ) VERBOSE=1 ;;
            h ) usage ;;
            * ) die "Unsupported option. Run 'kvm-install-vm help remove'." ;;
        esac
    done

    if [ "$#" != 1 ]
    then
        printf "Please specify a single host to remove.\n"
        printf "Run 'kvm-install-vm help remove' for usage.\n"
        exit 1
    else
        export VMNAME=$1
    fi

    # Check if domain exists and set DOMAIN_EXISTS variable.
    check_domain_exists "${VMNAME}"

    # Check if storage pool exists and set STORPOOL_EXISTS variable.
    check_storpool_exists "${VMNAME}"

    delete_vm "${VMNAME}"
}

function attach-disk ()
{
    # Set default variables
    FORMAT=qcow2

    # Parse command line arguments
    while getopts ":d:f:ps:t:h" opt
    do
        case "$opt" in
            d ) DISKSIZE="${OPTARG}G" ;;
            f ) FORMAT="${OPTARG}" ;;
            p ) PERSISTENT="${OPTARG}" ;;
            s ) SOURCE="${OPTARG}" ;;
            t ) TARGET="${OPTARG}" ;;
            h ) usage ;;
            * ) die "Unsupported option. Run 'kvm-install-vm help attach-disk'." ;;
        esac
    done

    shift $((OPTIND - 1))

    [ ! -z ${TARGET} ] || die "You must specify a target device, for e.g. '-t vdb'"
    [ ! -z ${DISKSIZE} ] || die "You must specify a size (in GB) for the new device, for e.g. '-d 5'"

    if [ "$#" != 1 ]
    then
        printf "Please specify a single host to attach a disk to.\n"
        printf "Run 'kvm-install-vm help attach-disk' for usage.\n"
        exit 1
    else
        # Set variables
        VMNAME=$1
        DISKDIR=${IMAGEDIR}/${VMNAME}    # Directory to create attached disk
        DISKNAME=${VMNAME}-${TARGET}-${DISKSIZE}.${FORMAT}

        if [ ! -f "${DISKDIR}/${DISKNAME}" ]
        then
            outputn "Creating new '${TARGET}' disk image for domain ${VMNAME}"
            (qemu-img create -f ${FORMAT} -o size=$DISKSIZE,preallocation=metadata \
                ${DISKDIR}/${DISKNAME} &>> ${DISKDIR}/${VMNAME}.log  && ok ) && \

            outputn "Attaching ${DISKNAME} to domain ${VMNAME}"
            (virsh attach-disk ${VMNAME} \
                --source $DISKDIR/${DISKNAME} \
                --target ${TARGET} \
                --subdriver ${FORMAT} \
                --cache none \
                --persistent &>> ${DISKDIR}/${VMNAME}.log && ok ) \
                || die "Could not attach disk."
        else
            die "Target ${TARGET} is already created or in use."
        fi

    fi

}

function fetch_images ()
{
    # Create image directory if it doesn't already exist
    mkdir -p ${IMAGEDIR}

    # Set variables based on $DISTRO
    # Use the command "osinfo-query os" to get the list of the accepted OS variants.
    case "$DISTRO" in
        centos7)
            QCOW=CentOS-7-x86_64-GenericCloud.qcow2
            OS_VARIANT="centos7.0"
            IMAGE_URL=https://cloud.centos.org/centos/7/images
            LOGIN_USER=centos
            ;;
        centos7-atomic)
            QCOW=CentOS-Atomic-Host-7-GenericCloud.qcow2
            OS_VARIANT="centos7.0"
            IMAGE_URL=http://cloud.centos.org/centos/7/atomic/images
            LOGIN_USER=centos
            ;;
        ubuntu1604)
            QCOW=ubuntu-16.04-server-cloudimg-amd64-disk1.img
            OS_VARIANT="ubuntu16.04"
            IMAGE_URL=https://cloud-images.ubuntu.com/releases/16.04/release
            LOGIN_USER=ubuntu
            ;;
        *)
            die "${DISTRO} not a supported OS.  Run 'kvm-install-vm create help'."
            ;;
    esac

    IMAGE=${IMAGEDIR}/${QCOW}

    if [ ! -f ${IMAGEDIR}/${QCOW} ]
    then
        output "Cloud image not found.  Downloading"
        set_wget
        ${WGET} --directory-prefix ${IMAGEDIR} ${IMAGE_URL}/${QCOW} || \
            die "Could not download image."
    fi

}

function main()
{
    echo "This is a main function placeholder"
}

if [ "${1}" != "--source-only" ]; then
        main "${@}"
fi